apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: techtrends
  name: techtrends
  namespace: {{ .Values.namespace.name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: techtrends
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: techtrends
    spec:
      containers:
      - image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        name: techtrends
        ports:
          - containerPort: {{ .Values.containerPort }}
            protocol: TCP
          ## Define the rules for the liveness probes.
          ## For example, verify the application on the main route `/`,
          ## on application port 6112. If the application is not responsive, then the pod will be restarted automatically.
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: {{ .Values.containerPort }}
          ## Define the rules for the readiness probes.
          ## For example, verify the application on the main route `/`,
          ## on application port 6112. If the application is responsive, then traffic will be sent to this pod.
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: {{ .Values.containerPort }}
        resources:
          ## The resource requests guarantees that the desired amount
          ## CPU and memory is allocated for a pod. In this example,
          ## the pod will be allocated with 64 Mebibytes and 250 miliCPUs.
          requests:
            memory: {{ .Values.requests.memory }}
            cpu: {{ .Values.request.CPU }}
          ## The resource limits ensure that the application is not consuming
          ## more than the specified CPU and memory values. In this example,
          ## the pod will not surpass 128 Mebibytes and 500 miliCPUs.
          limits:
            memory: {{ .Values.limit.memory }}
            cpu: {{ .Values.limit.CPU }}
status: {}
